/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package unam.diplomado.pixup.notificacionservice.api;

import unam.diplomado.pixup.notificacionservice.dto.ErrorResponse;
import unam.diplomado.pixup.notificacionservice.dto.NotificacionRequest;
import unam.diplomado.pixup.notificacionservice.dto.NotificacionResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-11-15T00:07:00.598125237Z[Etc/UTC]")
@Validated
@Tag(name = "notificacion", description = "API del Recurso Notificacion")
public interface NotificacionApi {

    default NotificacionApiDelegate getDelegate() {
        return new NotificacionApiDelegate() {};
    }

    /**
     * POST /api/notificaciones/usuario : Enviar Notificacion
     *
     * @param notificacionRequest  (required)
     * @return Notificacion Enviada Exitosamente (status code 201)
     *         or No se encontro el tipo de notificacion para el evento registrar usuario (status code 500)
     */
    @Operation(
        operationId = "enviarNotificacionAltaUsuario",
        summary = "Enviar Notificacion",
        tags = { "notificacion" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Notificacion Enviada Exitosamente", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NotificacionResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "No se encontro el tipo de notificacion para el evento registrar usuario", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/notificaciones/usuario",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<NotificacionResponse> enviarNotificacionAltaUsuario(
        @Parameter(name = "NotificacionRequest", description = "", required = true) @Valid @RequestBody NotificacionRequest notificacionRequest
    ) {
        return getDelegate().enviarNotificacionAltaUsuario(notificacionRequest);
    }


    /**
     * GET /api/notificaciones/id : Obtiene una notificacion por id
     *
     * @return Obtiene una Notificacion por identificador (status code 200)
     *         or Ha ocurrido un errror al recuperar la notificacion (status code 500)
     */
    @Operation(
        operationId = "getNotificacionById",
        summary = "Obtiene una notificacion por id",
        tags = { "notificacion" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Obtiene una Notificacion por identificador", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NotificacionResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Ha ocurrido un errror al recuperar la notificacion", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/notificaciones/id",
        produces = { "application/json" }
    )
    default ResponseEntity<NotificacionResponse> getNotificacionById(
        
    ) {
        return getDelegate().getNotificacionById();
    }


    /**
     * GET /api/notificaciones : Listar Notificaciones
     *
     * @return Listado de Notificaciones (status code 200)
     *         or Ha ocurrido un errror al recuperar las notificaciones (status code 500)
     */
    @Operation(
        operationId = "getNotificaciones",
        summary = "Listar Notificaciones",
        tags = { "notificacion" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Listado de Notificaciones", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = NotificacionResponse.class)))
            }),
            @ApiResponse(responseCode = "500", description = "Ha ocurrido un errror al recuperar las notificaciones", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/notificaciones",
        produces = { "application/json" }
    )
    default ResponseEntity<List<NotificacionResponse>> getNotificaciones(
        
    ) {
        return getDelegate().getNotificaciones();
    }

}
